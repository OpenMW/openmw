diff --git a/apps/openmw/mwbase/world.hpp b/apps/openmw/mwbase/world.hpp
index 5e76d82eba..fcbeb4c36a 100644
--- a/apps/openmw/mwbase/world.hpp
+++ b/apps/openmw/mwbase/world.hpp
@@ -428,6 +428,8 @@ namespace MWBase
             ///< get all containers in active cells owned by this Npc
             virtual void getItemsOwnedBy (const MWWorld::ConstPtr& npc, std::vector<MWWorld::Ptr>& out) = 0;
             ///< get all items in active cells owned by this Npc
+            
+            virtual void getItemById(const std::string id, MWWorld::Ptr& out) = 0;
 
             virtual bool getLOS(const MWWorld::ConstPtr& actor,const MWWorld::ConstPtr& targetActor) = 0;
             ///< get Line of Sight (morrowind stupid implementation)
diff --git a/apps/openmw/mwmechanics/mechanicsmanagerimp.cpp b/apps/openmw/mwmechanics/mechanicsmanagerimp.cpp
index 5f3dd58af3..8eece2f419 100644
--- a/apps/openmw/mwmechanics/mechanicsmanagerimp.cpp
+++ b/apps/openmw/mwmechanics/mechanicsmanagerimp.cpp
@@ -1,11 +1,14 @@
 #include "mechanicsmanagerimp.hpp"
 
+#include <ostream>
+
 #include <limits.h>
 
 #include <components/misc/rng.hpp>
 
 #include <components/esm/esmwriter.hpp>
 #include <components/esm/stolenitems.hpp>
+#include <components/esm/rechargeitems.hpp>
 
 #include <components/sceneutil/positionattitudetransform.hpp>
 
@@ -290,8 +293,57 @@ namespace MWMechanics
         duration /= MWBase::Environment::get().getWorld()->getTimeScaleFactor();
         MWWorld::Ptr player = getPlayer();
         player.getClass().getInventoryStore(player).rechargeItems(duration);
+        rechargeItems(duration);
+    }
+
+    void MechanicsManager::rechargeItems(float duration)
+    {
+        int index = 0;
+        for (std::vector<ESM::RechargeItem>::const_iterator it = mRechargeItems.begin(); it != mRechargeItems.end(); ++it)
+        {
+            ESM::RechargeItem rItem = *it;
+            MWWorld::Ptr item;
+            MWBase::Environment::get().getWorld()->getItemById(rItem.key, item);
+
+            MWWorld::Ptr player = getPlayer();
+            //MWWorld::InventoryStore& inv = player.getClass().getInventoryStore(player);
+            //MWWorld::ContainerStore& store = item.getContainerStore(store);
+            //if (inv.hasRechargedItem( item.getContainerStore()))
+            //    continue;
+
+            std::string enchantmentId = item.getClass().getEnchantment(item);
+            const ESM::Enchantment* enchantment = MWBase::Environment::get().getWorld()->getStore().get<ESM::Enchantment>().search(
+                enchantmentId);
+            if (!enchantment)
+            {
+                // TODO includer cer's library.
+                //std::cerr << "Warning: Can't find enchantment '" << enchantmentId << "' on item " << item.getCellRef().getRefId() << std::endl;
+                mRechargeItems.erase(mRechargeItems.begin() + index);
+                continue;
+            }
+
+            // Find the applicable Enchaments charge.
+            const float maxCharge = static_cast<float>(enchantment->mData.mCharge);
+            if (item.getCellRef().getEnchantmentCharge() == -1 ||
+                item.getCellRef().getEnchantmentCharge() == maxCharge)
+            {
+                mRechargeItems.erase(mRechargeItems.begin() + index);
+                continue;
+            }
+            static float fMagicItemRechargePerSecond = MWBase::Environment::get().getWorld()->getStore().get<ESM::GameSetting>().find(
+                "fMagicItemRechargePerSecond")->getFloat();
+
+            if (item.getCellRef().getEnchantmentCharge() <= maxCharge)
+            {
+                item.getCellRef().setEnchantmentCharge(std::min(item.getCellRef().getEnchantmentCharge() + fMagicItemRechargePerSecond * duration,
+                    maxCharge));
+            }
+            index++;
+        }
     }
 
+
+
     void MechanicsManager::update(float duration, bool paused)
     {
         if(!mWatched.isEmpty())
@@ -1022,6 +1074,8 @@ namespace MWMechanics
             }
         }
 
+        
+
         if (isAllowedToUse(ptr, item, victim))
             return;
 
@@ -1035,6 +1089,17 @@ namespace MWMechanics
         }
         Misc::StringUtils::lowerCaseInPlace(owner.first);
 
+        std::string enchantmentId = item.getClass().getEnchantment(item);
+        const ESM::Enchantment* enchantment = MWBase::Environment::get().getWorld()->getStore().get<ESM::Enchantment>().search(
+            enchantmentId);
+        if (enchantment)
+        {
+            ESM::RechargeItem rItem;
+            rItem.key = item.getCellRef().getRefId();
+            rItem.curCharge = item.getCellRef().getCharge();
+            rItem.maxCharge = enchantment->mData.mCharge;
+            mRechargeItems.push_back(rItem);
+        }
         if (!Misc::StringUtils::ciEqual(item.getCellRef().getRefId(), MWWorld::ContainerStore::sGoldId))
             mStolenItems[Misc::StringUtils::lowerCase(item.getCellRef().getRefId())][owner] += count;
 
@@ -1526,7 +1591,8 @@ namespace MWMechanics
     int MechanicsManager::countSavedGameRecords() const
     {
         return 1 // Death counter
-                +1; // Stolen items
+            + 1, // Stolen items
+            + 1; // Used Items
     }
 
     void MechanicsManager::write(ESM::ESMWriter &writer, Loading::Listener &listener) const
@@ -1538,6 +1604,12 @@ namespace MWMechanics
         writer.startRecord(ESM::REC_STLN);
         items.write(writer);
         writer.endRecord(ESM::REC_STLN);
+
+        ESM::RechargeItems ritems;
+        ritems.mRechargeItems = mRechargeItems;
+        writer.startRecord(ESM::REC_RCHG);
+        ritems.write(writer);
+        writer.endRecord(ESM::REC_RCHG);       
     }
 
     void MechanicsManager::readRecord(ESM::ESMReader &reader, uint32_t type)
@@ -1548,6 +1620,12 @@ namespace MWMechanics
             items.load(reader);
             mStolenItems = items.mStolenItems;
         }
+        else if (type == ESM::REC_RCHG)
+        {
+            ESM::RechargeItems rItems;
+            rItems.load(reader);
+            mRechargeItems = rItems.mRechargeItems;
+        }
         else
             mActors.readRecord(reader, type);
     }
@@ -1556,6 +1634,7 @@ namespace MWMechanics
     {
         mActors.clear();
         mStolenItems.clear();
+        mRechargeItems.clear();
         mClassSelected = false;
         mRaceSelected = false;
     }
diff --git a/apps/openmw/mwmechanics/mechanicsmanagerimp.hpp b/apps/openmw/mwmechanics/mechanicsmanagerimp.hpp
index adad219164..0a0c51a146 100644
--- a/apps/openmw/mwmechanics/mechanicsmanagerimp.hpp
+++ b/apps/openmw/mwmechanics/mechanicsmanagerimp.hpp
@@ -10,6 +10,8 @@
 #include "objects.hpp"
 #include "actors.hpp"
 
+#include "components\esm\rechargeitems.hpp"
+
 namespace MWWorld
 {
     class CellStore;
@@ -44,6 +46,8 @@ namespace MWMechanics
             typedef std::map<std::string, OwnerMap> StolenItemsMap;
             StolenItemsMap mStolenItems;
 
+            std::vector<ESM::RechargeItem> mRechargeItems;
+
         public:
 
             void buildPlayer();
@@ -76,6 +80,8 @@ namespace MWMechanics
 
             virtual void advanceTime (float duration);
 
+			virtual void rechargeItems(float duration);
+
             virtual void setPlayerName (const std::string& name);
             ///< Set player name.
 
diff --git a/apps/openmw/mwstate/statemanagerimp.cpp b/apps/openmw/mwstate/statemanagerimp.cpp
index 14ee5adee1..41040960bf 100644
--- a/apps/openmw/mwstate/statemanagerimp.cpp
+++ b/apps/openmw/mwstate/statemanagerimp.cpp
@@ -463,7 +463,9 @@ void MWState::StateManager::loadGame (const Character *character, const std::str
 
                     MWBase::Environment::get().getMechanicsManager()->readRecord(reader, n.intval);
                     break;
-
+                case ESM::REC_RCHG:
+                    MWBase::Environment::get().getMechanicsManager()->readRecord(reader, n.intval);
+                    break;
                 case ESM::REC_INPU:
                     MWBase::Environment::get().getInputManager()->readRecord(reader, n.intval);
                     break;
diff --git a/apps/openmw/mwworld/worldimp.cpp b/apps/openmw/mwworld/worldimp.cpp
index a9506385d4..90299aa907 100644
--- a/apps/openmw/mwworld/worldimp.cpp
+++ b/apps/openmw/mwworld/worldimp.cpp
@@ -2484,6 +2484,16 @@ namespace MWWorld
         }
     }
 
+    void World::getItemById(const std::string id, MWWorld::Ptr& out)
+    {
+        const Scene::CellStoreCollection& collection = mWorldScene->getActiveCells();
+        for (Scene::CellStoreCollection::const_iterator cellIt = collection.begin(); cellIt != collection.end(); ++cellIt)
+        {
+            MWWorld::CellStore* cellStore = (*cellIt);
+            out = cellStore->searchInContainer(id);
+        }
+    }
+
     bool World::getLOS(const MWWorld::ConstPtr& actor, const MWWorld::ConstPtr& targetActor)
     {
         if (!targetActor.getRefData().isEnabled() || !actor.getRefData().isEnabled())
diff --git a/apps/openmw/mwworld/worldimp.hpp b/apps/openmw/mwworld/worldimp.hpp
index a15dcaf3dd..3127777a27 100644
--- a/apps/openmw/mwworld/worldimp.hpp
+++ b/apps/openmw/mwworld/worldimp.hpp
@@ -539,6 +539,8 @@ namespace MWWorld
             virtual void getItemsOwnedBy (const MWWorld::ConstPtr& npc, std::vector<MWWorld::Ptr>& out);
             ///< get all items in active cells owned by this Npc
 
+            virtual void getItemById(const std::string id, MWWorld::Ptr& out);
+
             virtual bool getLOS(const MWWorld::ConstPtr& actor,const MWWorld::ConstPtr& targetActor);
             ///< get Line of Sight (morrowind stupid implementation)
 
diff --git a/components/CMakeLists.txt b/components/CMakeLists.txt
index 88de179039..11047ed5b2 100644
--- a/components/CMakeLists.txt
+++ b/components/CMakeLists.txt
@@ -77,7 +77,7 @@ add_component_dir (esm
     loadweap records aipackage effectlist spelllist variant variantimp loadtes3 cellref filter
     savedgame journalentry queststate locals globalscript player objectstate cellid cellstate globalmap inventorystate containerstate npcstate creaturestate dialoguestate statstate
     npcstats creaturestats weatherstate quickkeys fogstate spellstate activespells creaturelevliststate doorstate projectilestate debugprofile
-    aisequence magiceffects util custommarkerstate stolenitems transport animationstate controlsstate
+    aisequence magiceffects util custommarkerstate stolenitems rechargeitems transport animationstate controlsstate
     )
 
 add_component_dir (esmterrain
diff --git a/components/esm/defs.hpp b/components/esm/defs.hpp
index 0f0478faab..55d7d37f1c 100644
--- a/components/esm/defs.hpp
+++ b/components/esm/defs.hpp
@@ -128,6 +128,7 @@ enum RecNameInts
     REC_CAM_ = FourCC<'C','A','M','_'>::value,
     REC_STLN = FourCC<'S','T','L','N'>::value,
     REC_INPU = FourCC<'I','N','P','U'>::value,
+    REC_RCHG = FourCC<'R','C','H','G'>::value,
 
     // format 1
     REC_FILT = FourCC<'F','I','L','T'>::value,
